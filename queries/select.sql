
SELECT trackid, name, composer, unitprice FROM track;
SELECT trackid, name, albumid, mediatypeid, genreid, composer, milliseconds, bytes, unitprice FROM track;
SELECT * FROM track;
SELECT name, milliseconds, albumid FROM track;
SELECT name, milliseconds, albumid FROM track ORDER BY albumid ASC;
SELECT name, milliseconds, albumid FROM track ORDER BY albumid;
SELECT name, milliseconds, albumid FROM track ORDER BY albumid ASC, milliseconds DESC;
SELECT name, milliseconds, albumid FROM track ORDER BY 3,2;
SELECT TrackId, Name, Composer FROM track ORDER BY Composer;
SELECT name, milliseconds, bytes, albumid FROM track WHERE albumid = 1;
SELECT name, milliseconds, bytes, albumid FROM track WHERE albumid = 1 AND milliseconds > 250000;
SELECT name, albumid, composer FROM track WHERE composer LIKE '%Smith%' ORDER BY albumid;
SELECT name, albumid, mediatypeid FROM track WHERE mediatypeid IN(2, 3);
SELECT trackId, name FROM track LIMIT 10;
SELECT trackId, name FROM track LIMIT 10 OFFSET 10;
SELECT trackId, name, bytes FROM track ORDER BY bytes DESC LIMIT 10;
SELECT trackId, name, milliseconds FROM track ORDER BY milliseconds ASC LIMIT 5;
SELECT InvoiceId, BillingAddress, date(InvoiceDate) InvoiceDate, Total FROM invoice WHERE InvoiceDate NOT BETWEEN '2009-01-03' AND '2013-12-01' ORDER BY InvoiceDate;
SELECT TrackId, Name, Mediatypeid FROM Track WHERE MediaTypeId IN(1, 2) ORDER BY Name ASC;
SELECT TrackId, Name, MediaTypeId FROM Track WHERE MediaTypeId = 1 OR MediaTypeId = 2 ORDER BY Name ASC;
SELECT TrackId, Name, AlbumId FROM Track WHERE AlbumId IN( SELECT AlbumId FROM Album WHERE ArtistId = 12);
SELECT trackid, name, genreid FROM track WHERE genreid NOT IN(1, 2,3);
SELECT trackid, name FROM track WHERE name LIKE 'Wild%'
SELECT trackid, name FROM track WHERE name LIKE '%Br_wn%';
SELECT Title, Name FROM album INNER JOIN artist ON artist.ArtistId = album.ArtistId;
SELECT l.Title, r.Name FROM album l INNER JOIN artist r ON r.ArtistId = l.ArtistId;
SELECT Title, Name FROM album INNER JOIN artist USING(ArtistId);
SELECT Name, Title FROM artist LEFT JOIN album ON artist.ArtistId = album.ArtistId ORDER BY Name;
SELECT Name, Title FROM artist LEFT JOIN album USING(ArtistId) ORDER BY Name;
SELECT Name, Title FROM artist LEFT JOIN album ON artist.ArtistId = album.ArtistId WHERE Title IS NULL ORDER BY Name;
SELECT trackid, name, title FROM track INNER JOIN album ON album.albumid = track.albumid;
SELECT trackid, name, track.albumid AS album_id_tracks, album.albumid AS album_id_album, title FROM track INNER JOIN album ON album.albumid = track.albumid;
SELECT trackid, track.name AS track, album.title AS album, artist.name AS artist FROM track INNER JOIN album ON album.albumid = track.albumid INNER JOIN artist ON artist.artistid = album.artistid;
SELECT trackid, track.name AS Track, album.title AS Album, artist.name AS Artist FROM track INNER JOIN album ON album.albumid = track.albumid INNER JOIN artist ON artist.artistid = album.artistid WHERE artist.artistid = 10;
SELECT artist.ArtistId, AlbumId FROM artist LEFT JOIN album ON album.ArtistId = artist.ArtistId ORDER BY AlbumId;
SELECT artist.ArtistId , AlbumId FROM artist LEFT JOIN album ON album.ArtistId = artist.ArtistId WHERE AlbumId IS NULL;
SELECT albumid, COUNT(trackid) FROM track GROUP BY albumid;
SELECT albumid, COUNT(trackid) FROM track GROUP BY albumid ORDER BY COUNT(trackid) DESC;
SELECT track.albumid, title, COUNT(trackid) FROM track INNER JOIN album ON album.albumid = track.albumid GROUP BY track.albumid;
SELECT track.albumid, title, COUNT(trackid) FROM track INNER JOIN album ON album.albumid = track.albumid GROUP BY track.albumid;
SELECT albumid, SUM(milliseconds) length, SUM(bytes) size FROM track GROUP BY albumid;
SELECT track.albumid, title, min(milliseconds), max(milliseconds), round(avg(milliseconds),2) FROM track INNER JOIN album ON album.albumid = track.albumid GROUP BY track.albumid;
SELECT MediaTypeId, GenreId, COUNT(TrackId) FROM track GROUP BY MediaTypeId, GenreId;
SELECT STRFTIME('%Y', InvoiceDate) InvoiceYear, COUNT(InvoiceId) InvoiceCount FROM invoice GROUP BY STRFTIME('%Y', InvoiceDate) ORDER BY InvoiceYear;
SELECT albumid, COUNT(trackid) FROM track GROUP BY albumid HAVING albumid = 1;
SELECT track.AlbumId, title, SUM(Milliseconds) AS length FROM track INNER JOIN album ON album.AlbumId = track.AlbumId GROUP BY track.AlbumId HAVING length > 60000000;
SELECT trackid, name, albumid FROM track WHERE albumid =( SELECT albumid FROM album WHERE title = 'Let There Be Rock');
SELECT AVG(album.size) FROM( SELECT SUM(bytes) SIZE FROM track GROUP BY albumid) AS album;
SELECT albumid, title FROM album WHERE 10000000 >( SELECT sum(bytes) FROM track WHERE track.AlbumId = album.AlbumId) ORDER BY title;
SELECT albumid, title,( SELECT count(trackid) FROM track WHERE track.AlbumId = album.AlbumId) tracks_count FROM album ORDER BY tracks_count DESC;
SELECT * FROM Artist a WHERE NOT EXISTS( SELECT 1 FROM Album WHERE ArtistId = a.ArtistId) ORDER BY Name;
SELECT trackid, name, CASE WHEN milliseconds < 60000 THEN 'short' WHEN milliseconds > 60000 AND milliseconds < 300000 THEN 'medium' ELSE 'long' END category FROM track;
SELECT track.albumid, name, COUNT(*) FROM track INNER JOIN album ON album.albumid = track.albumid GROUP BY track.albumid HAVING COUNT(*) > 25 ORDER BY COUNT(*) DESC;
SELECT AlbumId, MAX(bytes) FROM track GROUP BY AlbumId;
SELECT * FROM playlist LEFT JOIN PlaylistTrack ON PlaylistTrack.Playlistid = playlist.Playlistid LEFT JOIN track ON PlaylistTrack.TrackId = track.TrackId LEFT JOIN invoiceLine ON track.TrackId = invoiceLine.TrackId LEFT JOIN invoice ON invoice.invoiceId = invoiceLine.invoiceId LEFT JOIN customer ON customer.CustomerId = invoice.CustomerId LEFT JOIN employee ON employee.EmployeeId = customer.CustomerId UNION SELECT * FROM playlist INNER JOIN PlaylistTrack ON PlaylistTrack.Playlistid = playlist.Playlistid INNER JOIN track ON PlaylistTrack.TrackId = track.TrackId INNER JOIN invoiceLine ON track.TrackId = invoiceLine.TrackId INNER JOIN invoice ON invoice.invoiceId = invoiceLine.invoiceId INNER JOIN customer ON customer.CustomerId = invoice.CustomerId INNER JOIN employee ON employee.EmployeeId = customer.CustomerId;
SELECT * FROM playlist LEFT JOIN PlaylistTrack ON PlaylistTrack.Playlistid = playlist.Playlistid LEFT JOIN track ON PlaylistTrack.TrackId = track.TrackId LEFT JOIN invoiceLine ON track.TrackId = invoiceLine.TrackId LEFT JOIN invoice ON invoice.invoiceId = invoiceLine.invoiceId LEFT JOIN customer ON customer.CustomerId = invoice.CustomerId LEFT JOIN employee ON employee.EmployeeId = customer.CustomerId INTERSECT SELECT * FROM playlist INNER JOIN PlaylistTrack ON PlaylistTrack.Playlistid = playlist.Playlistid INNER JOIN track ON PlaylistTrack.TrackId = track.TrackId INNER JOIN invoiceLine ON track.TrackId = invoiceLine.TrackId INNER JOIN invoice ON invoice.invoiceId = invoiceLine.invoiceId INNER JOIN customer ON customer.CustomerId = invoice.CustomerId INNER JOIN employee ON employee.EmployeeId = customer.CustomerId;
